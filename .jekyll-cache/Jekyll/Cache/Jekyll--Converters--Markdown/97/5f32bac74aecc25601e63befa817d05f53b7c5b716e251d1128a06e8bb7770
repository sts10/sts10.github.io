I"<p>A few months ago I wrote <a href="http://sts10.github.io/2014/09/10/getting-started-with-vim.html">a post about my first time tipping a toe in the water of Vim</a>, an intensely keystroke-based text editor. Despite getting the basics down, I still did 95% of my coding in Sublime Text 2, my old go-to editor.</p>

<p>However in the last few weeks I had a need for a fresh project to take up, and, considering that at least some of my future work will be on remote servers which will force me away from editors like Sublime Text, I figured I‚Äôd resume my exploration of Vim.</p>

<!-- more -->

<p>As I mentioned in that first post, I went through most of <a href="http://derekwyatt.org/vim/tutorials/novice/#Welcome">Derek Wyatt‚Äôs video tutorials</a>, which was super-helpful. Then I found and went through <a href="http://code.tutsplus.com/articles/25-vim-tutorials-screencasts-and-resources--net-14631">tuts+</a> and found <a href="http://vimcasts.org/episodes/page/7/">vimcasts.org</a>, which helped even more, introducing my to some helpful patterns and plugins.</p>

<p>Basically after the first pass with Vim I got the basic movements down. I installed NERDTree, which helped with project and window management. And I copied and pasted some suggested settings and key mapping into my .vimrc file. But there were still plenty of things I was far more comfortable doing in Sublime Text.</p>

<p>A partial list of these tasks would include:</p>
<ol>
  <li>advanced copy and pasting</li>
  <li>the ability to quickly comment and uncomment lines of code</li>
  <li>a certain amount of code and variable autocompletion</li>
  <li>spellcheck functionality</li>
  <li>An easier way to indent multiple lines</li>
  <li>More comfort with find and replace (ideally something as simple and powerful as Sublime text‚Äôs Cmd + d)</li>
</ol>

<p>I ended up solving these problems with edits to my vimrc file, plus the addition of two new plugins: <a href="https://github.com/scrooloose/nerdcommenter">NERDCommenter</a> and <a href="https://github.com/tpope/vim-unimpaired">Unimpaired</a>. NERDCommenter allows you to comment out lines of code based on its syntax. My preferred mappings at this point are:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap &lt;C-l&gt; &lt;Leader&gt;c&lt;Space&gt;
vmap &lt;C-l&gt; &lt;Leader&gt;c&lt;Space&gt;gv
imap &lt;C-l&gt; &lt;ESC&gt;&lt;Leader&gt;c&lt;Space&gt;a
</code></pre></div></div>

<p>And Unimpaired I only use for 4 commands that allows me to move single or multiple liens up and down a document. This is not something I ever did using Sublime Text but after first struggling with simple cut and pasting in Vim and then watching <a href="http://vimcasts.org/episodes/bubbling-text/">this Vimcast on ‚Äúbubbling text‚Äù</a> I decided to set it up and it seems useful. Mappings:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap &lt;C-k&gt; [e
nmap &lt;C-j&gt; ]ev
map &lt;C-k&gt; [egv
vmap &lt;C-j&gt; ]egv
</code></pre></div></div>

<p>Beyond those plugin mappings I also wrote some custom mappings for standard Vim functions. Here is a sample:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>" j and k don't skip over wrapped lines
nnoremap j gj
nnoremap k gk

" H to beginning of line, L to the end
noremap H ^
noremap L $

noremap &lt;c-a&gt; ^
noremap &lt;c-e&gt; $

" J and K move up and down 10 lines
noremap J 10j
noremap K 10k

" Tab and Shift tab to indent and un-indent
nnoremap &lt;Tab&gt; &gt;&gt;
nnoremap &lt;S-Tab&gt; &lt;&lt;

" D deletes to the end of the line, as it should
noremap D d$

" X removes line without placing it in the default registry
nmap X "_dd
" In visual mode, X removes selection without placing it in the default registry
vmap X "_d

" Control + p pastes from the 'yank register', and the ] formats it to indent you're pasting into (http://vimcasts.org/episodes/  meet-the-yank-register/)
nmap &lt;c-p&gt; "0]P

</code></pre></div></div>

<p>You can see my whole setup here in <a href="https://github.com/sts10/terminal_and_vim_settings/blob/master/vimrc">my new .vimrc file</a>.</p>

<p>As for a better find and replace, I learned a somple pattern. First, use / or ? to search for the pattern you want to replace. Replace that first instance with <code class="language-plaintext highlighter-rouge">cw</code> or <code class="language-plaintext highlighter-rouge">ciw</code>, change the word, then hit escape to return to normal mode. Now, hit <code class="language-plaintext highlighter-rouge">n</code> to go to the next instance. Hit <code class="language-plaintext highlighter-rouge">.</code> to make the replacement to that instance, or just hit <code class="language-plaintext highlighter-rouge">n</code> to leave that instance and go to the next instance. For me it‚Äôs easier and cleaner than remembering the unintuitive <code class="language-plaintext highlighter-rouge">:%s/texttoreplace/replacementtext/gc</code> (if that‚Äôs even right).</p>

<p>Separately, another nice trick is the r command to replace one character. As opposed to the to <code class="language-plaintext highlighter-rouge">s</code> command, it returns you to normal mode after you replace the single character automatically.</p>

<p>Another thing I didn‚Äôt realize I needed were the following mappings:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nnoremap j gj
nnoremap k gk
</code></pre></div></div>

<p>which makes j and k go through wrapped lines. Really helpful for navigating through long markdown paragraphs that are all technically one ‚Äúline‚Äù to Vim.</p>

<p>I also found the I kept needing to delete lines, usually blank lines, but I didn‚Äôt want them to go to the default registry. I figured out that the _ registry goes nowhere, thus hitting <code class="language-plaintext highlighter-rouge">p</code> won‚Äôt paste anything tat goes to the underscore registry. So I made shift X just delete a line to nowhere. Then when I hit <code class="language-plaintext highlighter-rouge">p</code> it pastes not the blank line but what I hopefully expect.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>" X removes line without placing it in the default registry
nmap X "_dd
" In visual mode, X removes selection without placing it in the default registry
vmap X "_d
</code></pre></div></div>

<p>Speaking of registries, there‚Äôs also a registry reserved for text that is yanked‚Äì the 0 registry. Thus:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap &lt;c-p&gt; "0]P
</code></pre></div></div>

<p>makes Control + p paste from that registry, and the ] bracket auto-formats it for me.</p>

:ET