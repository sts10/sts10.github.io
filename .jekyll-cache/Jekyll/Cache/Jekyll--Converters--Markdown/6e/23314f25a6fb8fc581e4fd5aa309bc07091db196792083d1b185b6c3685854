I"¿\<p>Earlier today, I <a href="https://octodon.social/@schlink/102226540877408178">tooted out a Rust question</a>: How would you write a function to determine if a Vector of integers are all the same, or not.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">all_eq</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">];</span>
    <span class="k">let</span> <span class="n">not_eq</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
    
    <span class="nd">assert_eq!</span><span class="p">(</span><span class="nf">is_all_same</span><span class="p">(</span><span class="n">all_eq</span><span class="p">),</span> <span class="kc">true</span><span class="p">);</span>
    <span class="nd">assert_eq!</span><span class="p">(</span><span class="nf">is_all_same</span><span class="p">(</span><span class="n">not_eq</span><span class="p">),</span> <span class="kc">false</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">is_all_same</span><span class="p">(</span><span class="n">vec</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="c">// ???</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now, I should note that right off the bat I screwed up a bit in how I laid out the sample code. I should have had the <code class="language-plaintext highlighter-rouge">is_all_same</code> function accept a slice, rather than a Vector. That way, we could pass a slice of the Vector to multiple functions.</p>

<p>So the challenge should have looked like this:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">all_eq</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">];</span>
    <span class="k">let</span> <span class="n">not_eq</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
    
    <span class="nd">assert_eq!</span><span class="p">(</span><span class="nf">is_all_same</span><span class="p">(</span><span class="o">&amp;</span><span class="n">all_eq</span><span class="p">),</span> <span class="kc">true</span><span class="p">);</span>
    <span class="nd">assert_eq!</span><span class="p">(</span><span class="nf">is_all_same</span><span class="p">(</span><span class="o">&amp;</span><span class="n">not_eq</span><span class="p">),</span> <span class="kc">false</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">is_all_same</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">usize</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="c">// ???</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Anyway, the Fediverse is wonderful and full of helpful Rust friends â€“ I ended up getting about a dozen solutions (none exactly the same I donâ€™t think?)</p>

<p>If you want to run them with appropriate tests, I also put them all in <a href="https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=57c76200984607a01f4de5e06557759d">a fresh Rust Playground, with tests</a>.</p>

<h2 id="answers">Answers</h2>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://mastodon.technology/@bugaevc/102226605331136063</span>
<span class="k">fn</span> <span class="nf">is_all_same1</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">usize</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">arr</span><span class="nf">.is_empty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">let</span> <span class="n">first</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="n">arr</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.all</span><span class="p">(|</span><span class="o">&amp;</span><span class="n">item</span><span class="p">|</span> <span class="n">item</span> <span class="o">==</span> <span class="n">first</span><span class="p">)</span>
<span class="p">}</span>

<span class="c">// https://mastodon.technology/@bugaevc/102226605331136063</span>
<span class="k">fn</span> <span class="nf">is_all_same2</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">usize</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="n">arr</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.min</span><span class="p">()</span> <span class="o">==</span> <span class="n">arr</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.max</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://mastodon.technology/@bugaevc/102226666945763586</span>
<span class="k">fn</span> <span class="nf">is_all_same3</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">usize</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="n">arr</span><span class="nf">.windows</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="nf">.all</span><span class="p">(|</span><span class="n">w</span><span class="p">|</span> <span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://cybre.space/@popefucker/102226716362389708</span>
<span class="k">fn</span> <span class="nf">is_all_same4</span><span class="p">(</span><span class="n">vec</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">usize</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">c</span> <span class="n">in</span> <span class="n">vec</span><span class="nf">.windows</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">true</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This one requires Rust Nightly!</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://weirder.earth/@Eden/102226720432099086</span>
<span class="c">// requires nightly (run with: `cargo +nightly run`)</span>
<span class="k">fn</span> <span class="nf">is_all_same5</span><span class="p">(</span><span class="n">vec</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">usize</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="k">match</span> <span class="n">vec</span> <span class="p">{</span>
        <span class="p">[]</span> <span class="k">=&gt;</span> <span class="k">true</span><span class="p">,</span>
        <span class="p">[</span><span class="mi">_</span><span class="n">elem</span><span class="p">]</span> <span class="k">=&gt;</span> <span class="k">true</span><span class="p">,</span>
        <span class="p">[</span><span class="n">head</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="o">..</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="n">head</span> <span class="o">!=</span> <span class="n">second</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="k">false</span><span class="p">,</span>
        <span class="p">[</span><span class="mi">_</span><span class="n">head</span><span class="p">,</span> <span class="n">rest</span><span class="o">..</span><span class="p">]</span> <span class="k">=&gt;</span> <span class="nf">is_all_same5</span><span class="p">(</span><span class="n">rest</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://asonix.dog/@asonix/102226712612355882</span>
<span class="k">fn</span> <span class="nf">is_all_same6</span><span class="p">(</span><span class="n">vec</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">vec</span><span class="nf">.iter</span><span class="p">();</span>

    <span class="k">let</span> <span class="n">first</span> <span class="o">=</span> <span class="n">iter</span><span class="nf">.next</span><span class="p">();</span>

    <span class="n">iter</span><span class="nf">.fold</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="p">|</span><span class="n">acc</span><span class="p">,</span> <span class="n">item</span><span class="p">|</span> <span class="p">{</span>
        <span class="n">acc</span><span class="nf">.and_then</span><span class="p">(|</span><span class="n">stored</span><span class="p">|</span> <span class="k">if</span> <span class="n">stored</span> <span class="o">==</span> <span class="n">item</span> <span class="p">{</span> <span class="nf">Some</span><span class="p">(</span><span class="n">stored</span><span class="p">)</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="nb">None</span> <span class="p">})</span>
    <span class="p">})</span>
    <span class="nf">.is_some</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>7 is the same as 6, but works for multiple types:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://asonix.dog/@asonix/102226729246023587</span>
<span class="k">fn</span> <span class="n">is_all_same7</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">vec</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span>
<span class="k">where</span>
    <span class="n">T</span><span class="p">:</span> <span class="n">PartialEq</span><span class="p">,</span>
<span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">vec</span><span class="nf">.iter</span><span class="p">();</span>

    <span class="k">let</span> <span class="n">first</span> <span class="o">=</span> <span class="n">iter</span><span class="nf">.next</span><span class="p">();</span>

    <span class="n">iter</span><span class="nf">.fold</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="p">|</span><span class="n">acc</span><span class="p">,</span> <span class="n">item</span><span class="p">|</span> <span class="p">{</span>
        <span class="n">acc</span><span class="nf">.and_then</span><span class="p">(|</span><span class="n">stored</span><span class="p">|</span> <span class="k">if</span> <span class="n">stored</span> <span class="o">==</span> <span class="n">item</span> <span class="p">{</span> <span class="nf">Some</span><span class="p">(</span><span class="n">stored</span><span class="p">)</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="nb">None</span> <span class="p">})</span>
    <span class="p">})</span>
    <span class="nf">.is_some</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://cmpwn.com/@pounce/102226770364267196</span>
<span class="k">fn</span> <span class="n">is_all_same8</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="nb">Eq</span><span class="o">&gt;</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="k">match</span> <span class="n">arr</span><span class="nf">.split_first</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">Some</span><span class="p">((</span><span class="n">first</span><span class="p">,</span> <span class="n">remaining</span><span class="p">))</span> <span class="k">=&gt;</span> <span class="n">remaining</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.all</span><span class="p">(|</span><span class="n">item</span><span class="p">|</span> <span class="o">*</span><span class="n">item</span> <span class="o">==</span> <span class="o">*</span><span class="n">first</span><span class="p">),</span>
        <span class="nb">None</span> <span class="k">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://functional.cafe/@juliobiason/1022268706680954231</span>
<span class="k">fn</span> <span class="nf">is_all_same9</span><span class="p">(</span><span class="n">vec</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="n">vec</span><span class="nf">.iter</span><span class="p">()</span>
        <span class="nf">.fold</span><span class="p">((</span><span class="k">true</span><span class="p">,</span> <span class="nb">None</span><span class="p">),</span> <span class="p">{</span>
            <span class="p">|</span><span class="n">acc</span><span class="p">,</span> <span class="n">elem</span><span class="p">|</span> <span class="p">{</span>
                <span class="k">if</span> <span class="n">acc</span><span class="na">.1</span><span class="nf">.is_some</span><span class="p">()</span> <span class="p">{</span>
                    <span class="p">(</span><span class="n">acc</span><span class="na">.0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">acc</span><span class="na">.1</span><span class="nf">.unwrap</span><span class="p">()</span> <span class="o">==</span> <span class="n">elem</span><span class="p">),</span> <span class="nf">Some</span><span class="p">(</span><span class="n">elem</span><span class="p">))</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="p">(</span><span class="k">true</span><span class="p">,</span> <span class="nf">Some</span><span class="p">(</span><span class="n">elem</span><span class="p">))</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="na">.0</span>
<span class="p">}</span>
</code></pre></div></div>

<p>10 here improves on 9 <a href="https://mastodon.social/@pingveno/102227440756639165">by removing an <code class="language-plaintext highlighter-rouge">unwrap()</code> and instead using <code class="language-plaintext highlighter-rouge">if let</code></a>:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://mastodon.social/@pingveno/102227440756639165</span>
<span class="k">fn</span> <span class="nf">is_all_same10</span><span class="p">(</span><span class="n">vec</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">usize</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="n">vec</span><span class="nf">.iter</span><span class="p">()</span>
        <span class="nf">.fold</span><span class="p">((</span><span class="k">true</span><span class="p">,</span> <span class="nb">None</span><span class="p">),</span> <span class="p">{</span>
            <span class="p">|</span><span class="n">acc</span><span class="p">,</span> <span class="n">elem</span><span class="p">|</span> <span class="p">{</span>
                <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">prev</span><span class="p">)</span> <span class="o">=</span> <span class="n">acc</span><span class="na">.1</span> <span class="p">{</span>
                    <span class="p">(</span><span class="n">acc</span><span class="na">.0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">prev</span> <span class="o">==</span> <span class="n">elem</span><span class="p">),</span> <span class="nf">Some</span><span class="p">(</span><span class="n">elem</span><span class="p">))</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="p">(</span><span class="k">true</span><span class="p">,</span> <span class="nf">Some</span><span class="p">(</span><span class="n">elem</span><span class="p">))</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="na">.0</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Maybe the most concise option, which uses <a href="https://doc.rust-lang.org/std/slice/struct.Windows.html">windows</a>:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://mastodon.technology/@bugaevc/102226891784062955</span>
<span class="k">fn</span> <span class="n">is_all_same11</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">PartialEq</span><span class="o">&gt;</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="n">arr</span><span class="nf">.windows</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="nf">.all</span><span class="p">(|</span><span class="n">w</span><span class="p">|</span> <span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://mastodon.social/@pingveno/102227428277791031</span>
<span class="k">fn</span> <span class="n">is_all_same12</span><span class="o">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="nb">Eq</span><span class="o">&gt;</span><span class="p">(</span><span class="n">slice</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="n">slice</span>
        <span class="nf">.get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="nf">.map</span><span class="p">(|</span><span class="n">first</span><span class="p">|</span> <span class="n">slice</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.all</span><span class="p">(|</span><span class="n">x</span><span class="p">|</span> <span class="n">x</span> <span class="o">==</span> <span class="n">first</span><span class="p">))</span>
        <span class="nf">.unwrap_or</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Again, if you want to run these answers with appropriate tests, I also put them all in <a href="https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=57c76200984607a01f4de5e06557759d">a fresh Rust Playground</a>.</p>
:ET