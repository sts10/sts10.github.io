I"û$<p>Huzzah! I finally wrestled my Recall code into a legit Ruby Gem!</p>

<p>Here‚Äôs <a href="https://github.com/sts10/recall">the updated GitHub repo</a> and here‚Äôs the super-official <a href="https://rubygems.org/gems/recall">RubyGem page</a>. You can install it by simple running <code class="language-plaintext highlighter-rouge">gem install recall</code> from your command line!</p>

<p>Big thanks to Flatiron alum <a href="https://twitter.com/kcurtin">Kevin Curtin</a> for his help organizing and connecting the various files.</p>

<!-- more -->

<p>Here‚Äôs a quick summary of the rather arduous process I went through to get the working script into a gem. This outline may not be exactly correct, as it took me a little over a week to finally whip my directory structure and <code class="language-plaintext highlighter-rouge">require_relative</code>s into proper order, but it is roughly how this went down.</p>

<h3 id="1-bundlers-skeleton">1. Bundler‚Äôs Skeleton</h3>
<p>I ended up using Bundler‚Äôs <a href="http://bundler.io/rubygems.html">built-in gem skeleton generator</a>. I ran <code class="language-plaintext highlighter-rouge">bundle gem recall</code> in a fresh, empty directory and got a scaffolded-out directory for the gem. But I still had some big hurdles to get over.</p>

<h3 id="2-gemspec-file">2. Gemspec File</h3>
<p>Next, an easy bit. I filled out the gemspec file that Bundler gave us with our personal information.</p>

<h3 id="3-the-transfer">3. The Transfer</h3>
<p>I then transferred code (models, a runner, and a template) into the appropriate folders inside the skeleton of directories that Bundler created for me. This involved a lot of guess-and-gem-build.</p>

<p><strong>Models and template</strong>: I put both of my model files and the templates folder (containing the one template) into <code class="language-plaintext highlighter-rouge">lib/recall/</code>.</p>

<p><strong>Runner</strong>: My ‚Äúrunner‚Äù went into <code class="language-plaintext highlighter-rouge">bin/</code> and I renamed it <code class="language-plaintext highlighter-rouge">recall</code> with no extension.</p>

<p><strong>That weird recall.rb file</strong>: Bundler created a module called <code class="language-plaintext highlighter-rouge">Recall</code> in <code class="language-plaintext highlighter-rouge">lib/recall.rb</code> for me. I guess I‚Äôve come to think of this file as the bridge between my runner (<code class="language-plaintext highlighter-rouge">bin/recall</code>) and my <code class="language-plaintext highlighter-rouge">lib/recall/</code> directory, which has all my models and templates.</p>

<p><strong>Why a module?</strong> The reason for making it a module is to protect it from naming conflicts. For example, Recall has a model called Results. We wouldn‚Äôt want anyone using my gem to have a conflict when they call their Results class. So now my Results model effectively becomes Recall::Results (the :: is <a href="http://stackoverflow.com/questions/3009477/what-is-rubys-double-colon-all-about">the scope operator</a>).</p>

<p><strong>Connecting the ‚Äúbridge‚Äù file to my models and templates:</strong> The <code class="language-plaintext highlighter-rouge">lib/recall.rb</code> (again, the ‚Äúbridge‚Äù file) has a <code class="language-plaintext highlighter-rouge">require_relative</code> pointing to each model‚Äì Results and SiteGenerator‚Äì <em>after</em> the module definition. Here‚Äôs the entire file in all its weirdness:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require "recall/version"
require 'erb'

module Recall
end

require_relative 'recall/results.rb'
require_relative 'recall/site_generator.rb'

</code></pre></div></div>

<p>The SiteGenerator model calls the template with the <code class="language-plaintext highlighter-rouge">expand_path</code> method, so we didn‚Äôt need to <code class="language-plaintext highlighter-rouge">require_relative</code> it here.</p>

<p><strong>Connecting the runner to the ‚Äúbridge‚Äù file (scope operators all over)</strong>: In <code class="language-plaintext highlighter-rouge">bin/recall</code>, the models Results and SiteGenerator are called as <code class="language-plaintext highlighter-rouge">Recall::Results</code> and <code class="language-plaintext highlighter-rouge">Recall::SiteGenerator</code>, respectively, to associate them with the <code class="language-plaintext highlighter-rouge">Recall</code> module declared in <code class="language-plaintext highlighter-rouge">lib/recall.rb</code>. Oddly, we also found that we had to change their declarations to include the Recall module and the scope operator.</p>

<h4 id="a-hiccup-when-connecting-one-of-the-models-to-the-template-and-the-output-file">A Hiccup When Connecting One of the Models to the Template and the Output File</h4>

<p>In addition to the problem of my <code class="language-plaintext highlighter-rouge">bin/recall</code> runner not being able to find my Recall module until we put scope operators all over the place, it was also difficult to connect my <code class="language-plaintext highlighter-rouge">SiteGenerator</code> model to the files it needed to access. <code class="language-plaintext highlighter-rouge">SiteGenerator</code> needs access to both the .rb.erb template, located in <code class="language-plaintext highlighter-rouge">lib/recall/templates</code>, to know how to render the search results, as well as the temporary file where it dumps the search results. Kevin recommended I try File‚Äôs <a href="http://ruby-doc.org/core-2.0/File.html#method-c-expand_path">expand_path method</a> for these connections and that did the trick. Here‚Äôs how we connected to the template:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>template_file = File.expand_path("../templates/sublime.rb.erb", __FILE__)
</code></pre></div></div>

<p>And here‚Äôs how we connected the SiteGenerator model to the output file it writes to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>output_file = File.expand_path("../_site/ruby_file.rb", __FILE__)
</code></pre></div></div>
<p>(I‚Äôm still not 100% why this was necessary.)</p>

<p>As a recap, here is the current directory structure:</p>

<p><img src="http://i.imgur.com/lYepXzH.png" alt="Directory Structure of Recall Gem v. 0.0.4" /></p>

<h3 id="4-building-the-gem-over-and-over-again">4. Building the Gem (over and over again)</h3>
<p>Now that we‚Äôve got the directory structure and file connections just right, it‚Äôs time to build our gem locally and see if it works! (OK so in actuality I attempted and failed to build this gem correctly numerous times. Each time I made a change to the code, I‚Äôd have to re-build it and re-install it to see what affect the change had on how the gem performed.)</p>

<p>To build the gem locally, you run the following command:</p>

<p><code class="language-plaintext highlighter-rouge">gem build recall.gemspec</code></p>

<p>This creates a new .gem file (with the version number appended) in your gem‚Äôs root directory. You then can run <code class="language-plaintext highlighter-rouge">gem install recall</code> to install the gem locally and then you can try it out. Whenever I needed to make another change, I‚Äôd gracefully <code class="language-plaintext highlighter-rouge">rm</code> the <code class="language-plaintext highlighter-rouge">.gem</code> file, re-build and re-install the gem locally, and try again. Thankfully, you are able to keep the same version number throughout this process so the number of times I had to do this will be forever unknown to others.</p>

<h3 id="5-publishing-the-gem-to-rubygemsorg">5. Publishing the Gem to RubyGems.org</h3>

<p>Once I successfully built the gem locally, and liked how it functioned, publishing the thing was surprisingly easy. As per the <a href="http://guides.rubygems.org/publishing/">RubyGems‚Äô publishing guide</a>, I simply created an account at <a href="https://rubygems.org/">RubyGems.org</a> then and ran <code class="language-plaintext highlighter-rouge">gem push recall-0.0.2.gem</code> in my local directory. To test it, I first uninstalled my local copy of version 0.0.2, then ran <code class="language-plaintext highlighter-rouge">gem install recall</code> and lo and behold it seems to work!</p>

<p>Also!</p>

<p>In preparation for its public debut, I added a good amount of flow control to the runner to allow users to set and change the search directory as they please. Their search directory choice is stored in a .txt file called search_map, which I put in <code class="language-plaintext highlighter-rouge">lib/recall</code>. If that file is empty or for some reason doesn‚Äôt exist, users are prompted to enter the absolute path of their desired search directory when they first call the gem. After that it‚Äôs set, although users can edit the search directory by ‚Äúsearching‚Äù for <code class="language-plaintext highlighter-rouge">change_dir</code>.</p>

<p>I think that about covers it. Give it a try? You can always uninstall it!</p>

<p>For more info be sure to visit <a href="https://github.com/sts10/recall">the GitHub repo</a>. As usual, there‚Äôs plenty of improvements to be pull-requested and merged.</p>

:ET