I"ÿ2<p>A while back I learned about <a href="https://github.com/FiloSottile/age">age</a>, which describes itself as ‚ÄúA simple, modern and secure encryption tool (and Go library) with small explicit keys, no config options, and UNIX-style composability.‚Äù As someone who‚Äôs struggled to learn and use PGP, I was intrigued!</p>

<p>There‚Äôs more info in <a href="https://docs.google.com/document/d/11yHom20CrsuX8KQJXBBw04s80Unjv8zCg_A7sPAX_9Y/preview">this public Google Doc</a>. Note: age is currently in <a href="https://github.com/FiloSottile/age/releases">beta</a>.</p>

<h2 id="should-i-use-age-or-rage">Should I use age or rage?</h2>

<p>There‚Äôs a implementation of age written in Rust called <a href="https://github.com/str4d/rage">rage</a>, which is inter-operable with age (the original golang version). Since I write some Rust, I chose to learn using rage, so all the commands below use <code class="language-plaintext highlighter-rouge">rage</code>. But given how rage and age are inter-operable, and I think the commands are the same, you could install age and still follow this post ‚Äì just be sure to use <code class="language-plaintext highlighter-rouge">age</code> wherever you see <code class="language-plaintext highlighter-rouge">rage</code>.</p>

<p>Note that, as of this writing, <a href="https://github.com/str4d/rage/issues/57">age encrypts large files about twice as fast as rage</a>.</p>

<h2 id="installation">Installation</h2>

<p>To install rage, there are a couple options listed in the <a href="https://github.com/str4d/rage#installation">README on Github</a> (<a href="https://github.com/FiloSottile/age#installation">likewise with age</a>, if you‚Äôre going that route).</p>

<p>Since I have an up-to-date version of the Rust language <a href="https://www.rust-lang.org/tools/install">installed</a> (1.46) already set up, I installed rage by running <code class="language-plaintext highlighter-rouge">cargo install rage</code>.</p>

<h2 id="using-rage-to-encrypt-a-file-with-a-passphrase">Using rage to encrypt a file with a passphrase</h2>

<p>Let‚Äôs say we have a file called secrets.txt that we want to encrypt, such that only someone who knows a certain passphrase can decrypt it. We could just run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rage <span class="nt">-p</span> <span class="nt">-o</span> secrets_encrypted.txt secrets.txt
</code></pre></div></div>

<p>Your terminal with then prompt you to enter your chosen the passphrase (if you don‚Äôt provide one, rage will generate a nice long one for you). I left the passphrase field blank so that rage would generate a passphrase for me. Here‚Äôs what I got:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rage <span class="nt">-p</span> <span class="nt">-o</span> secrets_encrypted.txt secrets.txt 
Using an autogenerated passphrase:
    skull-tribe-mirror-help-logic-maple-syrup-round-click-danger
</code></pre></div></div>

<p>Rage created a new file called ‚Äúsecrets_encrypted.txt‚Äù that is encrypted and thus unreadable. The original secrets.txt is still in tact.</p>

<h2 id="decrypting-file-with-a-passphrase">Decrypting file with a passphrase</h2>

<p>Decrypting this file is simple. Just run</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rage <span class="nt">-d</span> <span class="nt">-o</span> secrets_decrypted.txt secrets_encrypted.txt 
</code></pre></div></div>

<p>Running this command prompts you to enter the passphrase we set when encrypting the file. If you enter the passphrase correctly, rage decrypts the file into a new file called secrets_decrypted.txt. Again, the original ‚Äúsecrets_encrypted.txt‚Äù file is left in tact.</p>

<h2 id="using-a-publicprivate-key-pair">Using a public/private key-pair</h2>

<p>Encrypting and decrypting files with secret passphrases can be useful, but one downside is that you have to securely get that passphrase to the other party. We can avoid this issue by using a public/private key-pair, which rage also supports.</p>

<p>When we installed rage, we got two executables: <code class="language-plaintext highlighter-rouge">rage</code>, which we‚Äôve been using, and <code class="language-plaintext highlighter-rouge">rage-keygen</code>, which we haven‚Äôt used yet. rage-kleygen generate key-pairs for us. Let‚Äôs make a key-pair now.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rage-keygen <span class="o">&gt;</span> test_key.txt
</code></pre></div></div>

<p>Running this command will print our new <em>public</em> key.</p>

<pre><code class="language-txt">Public key: age1s366ey709nfd29jpaapvq2s2w29wjv9y68v9vvz5rc5v3tgge4xq7afnej
</code></pre>

<p>It also places both this public key and our private or <em>secret</em> key in a file called test_key.txt. You should not share your secret key with anyone. But since this is a demonstration, I‚Äôll copy and paste the contents of my new test_key.txt file below.</p>

<pre><code class="language-txt"># created: 2020-09-08T15:39:39-04:00                                                                     
# public key: age1s366ey709nfd29jpaapvq2s2w29wjv9y68v9vvz5rc5v3tgge4xq7afnej                                         
AGE-SECRET-KEY-1URL6WQVKQ0ULFDH7S0UL3ZFL2FU0WAKD778CLK5E9ASH40S8R90QE8E20V
</code></pre>

<p>As you can see, the file contains both our public key and our secret key (don‚Äôt share it with anyone!).</p>

<h3 id="encrypting-a-file-for-a-public-key">Encrypting a file for a public key</h3>

<p>Let‚Äôs say someone else wants to encrypt a file for us, the holder of the key above. Let‚Äôs say the file they want to encrypt for us is file_for_keyholder_only.txt. They‚Äôd run</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rage <span class="nt">-o</span> file_for_keyholder_only_encrypted.txt <span class="nt">-r</span> age1s366ey709nfd29jpaapvq2s2w29wjv9y68v9vvz5rc5v3tgge4xq7afnej file_for_keyholder_only.txt
</code></pre></div></div>

<p>That‚Äôs a long one, so let‚Äôs go over it. As above with the passphrase example, the <code class="language-plaintext highlighter-rouge">-o</code> flag tells rage where we‚Äôd like to place the output of this command ‚Äì in this case, a new file that will be encrypted. Next is the <code class="language-plaintext highlighter-rouge">-r</code> flag, which stands for recipient. Here, we‚Äôre telling rage that we want to encrypt this file for a particular recipient, namely the owner of this specific public key (remember, <em>public</em> keys can be shared safely out in the open). Then, lastly, we tell rage which file we want to act on, in this case ‚Äúfile_for_keyholder_only.txt‚Äù, the file we wish to encrypt.</p>

<p>Once we hit enter, rage creates a new, encrypted file called file_for_keyholder_only_encrypted.txt.</p>

<h3 id="decrypting-a-file-with-a-secret-key">Decrypting a file with a secret key</h3>

<p>Now let‚Äôs say we receive a file that‚Äôs been encrypted for us using our public key. We want to decrypt it. We‚Äôll run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rage <span class="nt">-o</span> decrypted.txt <span class="nt">-i</span> test_key.txt <span class="nt">-d</span> file_for_keyholder_only_encrypted.txt
</code></pre></div></div>

<p>Which will decrypt the file to ‚Äúdecrypted.txt‚Äù. Note the <code class="language-plaintext highlighter-rouge">-i</code> flag pointing to the key-pair file (which contains the secret key), and the <code class="language-plaintext highlighter-rouge">-d</code> flag for decryption, which we‚Äôre already familiar with.</p>

<h2 id="creating-a-more-permanent-identity">Creating a more permanent identity</h2>

<p>If you want to create a key-pair that you‚Äôll use more permanently, the <a href="https://docs.google.com/document/d/11yHom20CrsuX8KQJXBBw04s80Unjv8zCg_A7sPAX_9Y/preview">age documentation</a> recommends storing the key file in <code class="language-plaintext highlighter-rouge">~/.config/age/keys.txt</code>. You‚Äôd do this by running</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> ~/.config/age
<span class="nv">$ </span>rage-keygen <span class="o">&gt;&gt;</span> ~/.config/age/keys.txt
</code></pre></div></div>

<p>This is also handy because rage will look to that location first for key-pairs when decrypting. This means you can just run <code class="language-plaintext highlighter-rouge">rage -d encrypted_file.txt</code> (without specifying a key-pair file with <code class="language-plaintext highlighter-rouge">-i</code> like we did above), and rage will use the key-pair located at <code class="language-plaintext highlighter-rouge">~/.config/age/keys.txt</code> as a default.</p>

<p>As before, you can share this public key broadly and publicly, so that others could encrypt files for you. For example, I now have a public age/rage key in <a href="https://gist.github.com/sts10/4a4e01021b3a5ad42e9b73e0abd7b7e3">a Github Gist</a> that I link to from some of my social media accounts. Just remember: <strong>Don‚Äôt share your secret key!</strong></p>

<h2 id="can-you-encryptdecrypt-text-rather-than-a-file">Can you encrypt/decrypt <em>text</em> rather than a file?</h2>

<p>What if you just want to encrypt a line or two of text, rather than a file? You can ‚Äúpipe‚Äù in an echo command (note that rage requires that you encrypt using a public key, rather than a passphrase):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo "secret message from echo" | rage -a -r age180d9ut0ff3zzkq6umq588p7zlqqetuf8nhxxfhsysmg4hjyt55lsjraysp 
</code></pre></div></div>

<p>which prints the encrypted text to the terminal:</p>

<pre><code class="language-txt">-----BEGIN AGE ENCRYPTED FILE-----
YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBvUWtNRmhYbURWQTRYL2ZF
Z2h2ZWhLdVc1S1RWZWRIV293UkZ1RWMxb2tjCkxxcStGMzhWODdzN0RBNDlTMmlM
ZXczeTNydzAyMkVleTF4MUd0QnpheEkKLT4gam9pbnQtb2lsLWMwIksuICgKWjQ5
OEgxU2hiNE9CTjhCdjlkeURuRFU1RWl5TEMwREh0VzRKUm1JT2ZBU1hKUVZOeXVM
emFyNHZSbGp1eTdYUgp4N29xbUtYdnZSREQyL2NtdXMzcTVBbEN5VGVUT0lrVERt
SGR3UjVCMmZZT1VZOAotLS0gREVxbjZ3Q0s4cnBSL0ZPZ3g3RVpWTUtLMk0zWU5C
NVgrNmRsbG9ybDJoawqvEbV6F/m6uYjcD7mBmfFiUMaRX/y/nzNlal+zaO9yBVPV
xvRY+zVyXtYPtvAz42vGrMdGeeGD0+8=
-----END AGE ENCRYPTED FILE-----
</code></pre>

<p>The <code class="language-plaintext highlighter-rouge">-a</code> flag stands for ‚Äúarmor‚Äù and it tells rage to encrypt to a <a href="https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail">PEM</a> encoded format, which is easier to copy and paste and move around in general.</p>

<p>Having this block of text printed to the terminal screen isn‚Äôt super helpful. We already know how to print it to a file, using the <code class="language-plaintext highlighter-rouge">-o</code> flag. But this time, how about we pipe it directly to the clipboard? If you‚Äôre using Linux and have <code class="language-plaintext highlighter-rouge">xsel</code> installed, you‚Äôd do this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"secret message from echo"</span> | rage <span class="nt">-a</span> <span class="nt">-r</span> age180d9ut0ff3zzkq6umq588p7zlqqetuf8nhxxfhsysmg4hjyt55lsjraysp | xsel <span class="nt">--clipboard</span>
</code></pre></div></div>

<p>(On Mac, try <code class="language-plaintext highlighter-rouge">| pbcopy</code> at the end, though I haven‚Äôt tested this. Other systems may have yet another tools called xclip installed.)</p>

<p>To decrypt an encrypted message currently in your clipboard, you‚Äôd run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xsel <span class="nt">--clipboard</span> | rage <span class="nt">-d</span>
</code></pre></div></div>

<p>which will print the decrypted message to the terminal screen.</p>

<h2 id="more-features">More features</h2>

<p>This guide is by no means exhaustive of what you can already do with these tools. Both rage and age currently have more features than I‚Äôve outlined here. Check them out in each of their documentation!</p>

<h2 id="to-look-forward-to">To look forward to</h2>

<p>It looks like the developer(s) of rage seem to be working on (and <a href="https://groups.google.com/forum/#!topic/age-dev/lKyzz61iphM">discussing</a>) some sort of <a href="https://github.com/str4d/age-plugin-yubikey/pull/1">Yubikey plugin</a>, though I‚Äôm not sure of its current status. That‚Äôd be pretty cool though!</p>
:ET