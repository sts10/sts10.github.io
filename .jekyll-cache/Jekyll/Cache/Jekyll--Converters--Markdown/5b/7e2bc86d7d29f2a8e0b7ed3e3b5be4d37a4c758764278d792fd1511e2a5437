I"[;<p>Ruby 2.3.0 was <a href="https://www.ruby-lang.org/en/news/2015/12/25/ruby-2-3-0-released/">released on Christmas</a>. Woohoo!</p>

<p>Actually, truth be told, since I started learning Ruby, beginning with 2.0.0-p353, I haven’t found many useful new methods or tricks. But! Here is 2.3.0 with at least one new operator and one new method that I’ll most likely be taking advantage of.</p>

<p>Let’s get to it.</p>

<!-- more -->

<h2 id="the-dig-method">The Dig Method</h2>

<p>The <a href="http://ruby-doc.org/core-2.3.0/Hash.html#method-i-dig">#dig method</a>, which I <a href="http://blog.andrebarbosa.co/di/">just learned about today</a>, allows us to safely access nested data in <code class="language-plaintext highlighter-rouge">Hash</code>, <code class="language-plaintext highlighter-rouge">Array</code>, or <code class="language-plaintext highlighter-rouge">Struct</code> objects. The ruby-doc explanation is “Extracts the nested value specified by the sequence of idx objects by calling dig at each step, returning nil if any intermediate step is nil.”</p>

<p><a href="http://blog.andrebarbosa.co/di/">André Barbosa’s post</a> has a simple example illustrating how the method works. Basically if you’re looking to get a value out of nested hashes, in Ruby 2.2 and older you’d have something like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">name</span> <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="ss">:user</span><span class="p">][</span><span class="ss">:name</span><span class="p">]</span>  
</code></pre></div></div>

<p>But if you were iterating through a number of posts, and one of them did not have a <code class="language-plaintext highlighter-rouge">:user</code> defined, you’d hit an error and, without a rescue, your program would halt.</p>

<p>One way to prevent against this in Ruby 2.2 and older, as Barbosa notes, is to do some conditional work:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">name</span> <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="ss">:user</span><span class="p">][</span><span class="ss">:name</span><span class="p">]</span> <span class="k">if</span> <span class="n">post</span><span class="p">[</span><span class="ss">:user</span><span class="p">]</span>
<span class="c1"># or</span>
<span class="nb">name</span> <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="ss">:user</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">post</span><span class="p">[</span><span class="ss">:name</span><span class="p">][</span><span class="ss">:user</span><span class="p">]</span>  
</code></pre></div></div>

<p>This is fine and good for this example, but as your hashes or arrays get more nested, this can get pretty messy. For example, when working with <a href="https://developers.facebook.com/docs/graph-api/reference/v2.5/insights">the Facebook Insights API</a>, I’ve got Ruby 2.2 code that looks like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">insights</span><span class="p">[</span><span class="mi">46</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">insights</span><span class="p">[</span><span class="mi">46</span><span class="p">][</span><span class="s2">"values"</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">insights</span><span class="p">[</span><span class="mi">46</span><span class="p">][</span><span class="s2">"values"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s2">"value"</span><span class="p">]</span>
  <span class="vi">@link_clicks</span> <span class="o">=</span> <span class="n">insights</span><span class="p">[</span><span class="mi">46</span><span class="p">][</span><span class="s2">"values"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s2">"value"</span><span class="p">][</span><span class="s2">"link clicks"</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>As you may have guessed, when you ask Facebook for the Insights for a given page post, it returns a large array called <code class="language-plaintext highlighter-rouge">insights</code> that has an element for roughly each metric about that post (and there are many). <code class="language-plaintext highlighter-rouge">insights[46]</code>, for example, contains information about clicks on the post (when it exists!).</p>

<p>Here’s a look at just the first 3 elements of the Insights array for a recent CNN Facebook post (all numbers changed):</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">insights</span> <span class="o">=</span> <span class="p">[</span>
 <span class="p">{</span><span class="s2">"id"</span><span class="o">=&gt;</span><span class="s2">"5550296508_10154357616641509/insights/post_story_adds_unique/lifetime"</span><span class="p">,</span>
  <span class="s2">"name"</span><span class="o">=&gt;</span><span class="s2">"post_story_adds_unique"</span><span class="p">,</span>
  <span class="s2">"period"</span><span class="o">=&gt;</span><span class="s2">"lifetime"</span><span class="p">,</span>
  <span class="s2">"values"</span><span class="o">=&gt;</span><span class="p">[{</span><span class="s2">"value"</span><span class="o">=&gt;</span><span class="mi">9000</span><span class="p">}],</span>
  <span class="s2">"title"</span><span class="o">=&gt;</span><span class="s2">"Lifetime Talking About This (Post)"</span><span class="p">,</span>
  <span class="s2">"description"</span><span class="o">=&gt;</span><span class="s2">"Lifetime: The number of unique people who created a story by interacting with your Page post. (Unique Users)"</span><span class="p">},</span>
 <span class="p">{</span><span class="s2">"id"</span><span class="o">=&gt;</span><span class="s2">"5550296508_10154357616641509/insights/post_story_adds/lifetime"</span><span class="p">,</span>
  <span class="s2">"name"</span><span class="o">=&gt;</span><span class="s2">"post_story_adds"</span><span class="p">,</span>
  <span class="s2">"period"</span><span class="o">=&gt;</span><span class="s2">"lifetime"</span><span class="p">,</span>
  <span class="s2">"values"</span><span class="o">=&gt;</span><span class="p">[{</span><span class="s2">"value"</span><span class="o">=&gt;</span><span class="mi">8000</span><span class="p">}],</span>
  <span class="s2">"title"</span><span class="o">=&gt;</span><span class="s2">"Lifetime Post Stories"</span><span class="p">,</span>
  <span class="s2">"description"</span><span class="o">=&gt;</span><span class="s2">"Lifetime: The number of stories generated about your Page post. (Total Count)"</span><span class="p">},</span>
 <span class="p">{</span><span class="s2">"id"</span><span class="o">=&gt;</span><span class="s2">"5550296508_10154357616641509/insights/post_story_adds_by_action_type_unique/lifetime"</span><span class="p">,</span>
  <span class="s2">"name"</span><span class="o">=&gt;</span><span class="s2">"post_story_adds_by_action_type_unique"</span><span class="p">,</span>
  <span class="s2">"period"</span><span class="o">=&gt;</span><span class="s2">"lifetime"</span><span class="p">,</span>
  <span class="s2">"values"</span><span class="o">=&gt;</span><span class="p">[{</span><span class="s2">"value"</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">"like"</span><span class="o">=&gt;</span><span class="mi">4000</span><span class="p">,</span> <span class="s2">"share"</span><span class="o">=&gt;</span><span class="mi">900</span><span class="p">,</span> <span class="s2">"comment"</span><span class="o">=&gt;</span><span class="mi">700</span><span class="p">}}],</span>
  <span class="s2">"title"</span><span class="o">=&gt;</span><span class="s2">"Lifetime Talking About This (Post) by action type"</span><span class="p">,</span>
  <span class="s2">"description"</span><span class="o">=&gt;</span><span class="s2">"Lifetime: The number of unique people who created a story about your Page post by interacting with it. (Unique Users)"</span><span class="p">}</span>
 <span class="c1"># many more array elements here...</span>
<span class="p">]</span>
</code></pre></div></div>

<p>As you can see, if we wanted the number of shares on this post (which I’ve changed to <code class="language-plaintext highlighter-rouge">900</code>), we’ve got some digging to do. Here’s how I have it using Ruby 2.2 and older:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shares_old_way</span> <span class="o">=</span> <span class="n">insights</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="s2">"values"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s2">"value"</span><span class="p">][</span><span class="s2">"share"</span><span class="p">]</span>
</code></pre></div></div>

<p>The big problem here is if, for whatever reason, <em>any</em> of the posts I’m looking at don’t have a hash inside <code class="language-plaintext highlighter-rouge">insights[2]["values"][0]</code> I’ll be calling <code class="language-plaintext highlighter-rouge">["value"]</code> on <code class="language-plaintext highlighter-rouge">nil</code> and I’ll get a <code class="language-plaintext highlighter-rouge">NoMethodError: undefined method</code> error and my program will be halted. A similar fate will meet my little script if <code class="language-plaintext highlighter-rouge">insights</code> doesn’t have something at <code class="language-plaintext highlighter-rouge">[46]</code> or if any of the other links in the chain return a <code class="language-plaintext highlighter-rouge">nil</code>. Hence the conditional checks I outlined above.</p>

<p>However with the <code class="language-plaintext highlighter-rouge">dig</code> method, I can use this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shares_using_dig</span> <span class="o">=</span> <span class="n">insights</span><span class="p">.</span><span class="nf">dig</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">"values"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">"value"</span><span class="p">,</span> <span class="s2">"share"</span><span class="p">)</span>
</code></pre></div></div>

<p>Using <code class="language-plaintext highlighter-rouge">dig</code>, if any of links in the chain return <code class="language-plaintext highlighter-rouge">nil</code>, the dig call returns nil rather than erroring out. In this case, it’s pretty good to get <code class="language-plaintext highlighter-rouge">shares</code> set to <code class="language-plaintext highlighter-rouge">nil</code> if a given post doesn’t have shares for whatever reason. I could run something like <code class="language-plaintext highlighter-rouge">shares = 0 if !shares</code> afterward to set <code class="language-plaintext highlighter-rouge">shares</code> to 0 if none were detected, but that’s probably not necessary.</p>

<h2 id="the-safe-navigation-operator">The Safe Navigation Operator</h2>

<p>As with the #dig method, I learned about the safe navigation operator (a.k.a. the lonely operator) from <a href="http://aaronlasseigne.com/2016/01/04/rubys-new-safe-navigation-not-equal-operator/">a blog post</a> that was posted to <a href="https://www.reddit.com/r/ruby">the Ruby subreddit</a>. (Matz also mentions it in <a href="https://blog.heroku.com/archives/2015/12/25/ruby-2-3-0-on-heroku-with-matz">an interview on the Heroku blog</a>.)</p>

<p>Similarly to the #dig method, the safe navigation operator <code class="language-plaintext highlighter-rouge">.&amp;</code> makes it safer to string multiple methods together. Here’s the example <a href="http://aaronlasseigne.com/2016/01/04/rubys-new-safe-navigation-not-equal-operator/">Lasseigne gives</a>:</p>

<p>Say you have this array:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">some_array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>
<p>We could check that the first element is positive by running:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">some_array</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">positive?</span>
<span class="c1"># =&gt; true</span>
</code></pre></div></div>

<p>(Lasseigne notes that the <code class="language-plaintext highlighter-rouge">positive?</code> method is also new in Ruby 2.3.0)</p>

<p>But similarly to our hash navigation problem earlier, if the array we’re checking is empty we’ll get a <code class="language-plaintext highlighter-rouge">NoMethodError</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[].</span><span class="nf">first</span><span class="p">.</span><span class="nf">positive?</span>
<span class="c1"># =&gt; NoMethodError: undefined method `positive?' for nil:NilClass</span>
</code></pre></div></div>

<p>Again, there’s a conditional fix here: <code class="language-plaintext highlighter-rouge">[].first.positive? if [].first</code>, but now we have the handy safe navigation operator!</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">some_array</span><span class="p">.</span><span class="nf">first</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">positive?</span>
</code></pre></div></div>

<p>As Lasseigne writes, “If <code class="language-plaintext highlighter-rouge">first</code> returns <code class="language-plaintext highlighter-rouge">nil</code> then the entire expression returns <code class="language-plaintext highlighter-rouge">nil</code>. If not then we’ll continue down the method chain and call <code class="language-plaintext highlighter-rouge">positive?</code>.”</p>

<p>Lasseigne concludes his post by discussing whether this new safe navigation operator is more or less DRY than the previous alternative(s). I think it’s a worthwhile question, and I’m honestly not sure it will be in all cases.</p>

<p>Anyway, navigate on with confidence!</p>

<p><img src="http://stream1.gifsoup.com/view2/3214548/captain-ron-o.gif" alt="Captain Ron would use #dig" /></p>
:ET