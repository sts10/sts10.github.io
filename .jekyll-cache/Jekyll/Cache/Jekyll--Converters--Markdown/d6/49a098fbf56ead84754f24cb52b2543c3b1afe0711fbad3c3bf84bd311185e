I"ê><p>In my <a href="http://sts10.github.io/2014/04/21/squawkbot-connecting-to-twitter.html">first post</a> about <a href="http://squawkbot.herokuapp.com/">SquawkBot</a> (<a href="https://github.com/sts10/squawk">public GitHub repo</a>), I went over how the app connects to the Twitter REST API. In this post, I‚Äôll be discussing the second main part of the app: extracting the URLs from the tweets.</p>

<!-- more -->

<p>In <a href="http://sts10.github.io/2014/04/21/squawkbot-connecting-to-twitter.html">part one</a> we left off in the Timeline model and we were just about to push our custom Tweet objects into an instance variable called <code class="language-plaintext highlighter-rouge">@tweets</code>. Again, we‚Äôre not shoveling in the Tweet objects that Twitter gives us directly. We‚Äôre pushing in oru own Tweet objects. Let‚Äôs review this part for a second.</p>

<p>At the end of the <code class="language-plaintext highlighter-rouge">make_tweets</code> instance method in the Timeline model, we have this <code class="language-plaintext highlighter-rouge">each</code> loop, where <code class="language-plaintext highlighter-rouge">timeline</code> is the array of all the Tweet objects we got from Twitter:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">timeline</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet_obj</span><span class="o">|</span>
  <span class="vi">@tweets</span> <span class="o">&lt;&lt;</span> <span class="no">Tweet</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">tweet_obj</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>However, these Tweet objects from Twitter didn‚Äôt really suit our needs. So we decided to make our own Tweet objects. To make this process as easy as possible, we had our Tweet objects accept Twitter‚Äôs Tweet object on intialization, as you can see in the above <code class="language-plaintext highlighter-rouge">each</code> loop.</p>

<h3 id="making-our-own-tweet-object">Making our Own Tweet Object</h3>

<p>Here is our Tweet model in its entirety:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Tweet</span> 
  <span class="nb">attr_reader</span> <span class="ss">:tweet_id</span>
  <span class="nb">attr_reader</span> <span class="ss">:text</span>
  <span class="nb">attr_reader</span> <span class="ss">:user_name</span>
  <span class="nb">attr_reader</span> <span class="ss">:user_handle</span>
  <span class="nb">attr_reader</span> <span class="ss">:tweet_url</span>
  <span class="nb">attr_reader</span> <span class="ss">:created_at</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tweet_obj</span><span class="p">)</span>
    <span class="vi">@tweet_id</span> <span class="o">=</span> <span class="n">tweet_obj</span><span class="p">.</span><span class="nf">id</span>
    <span class="vi">@text</span> <span class="o">=</span> <span class="n">tweet_obj</span><span class="p">.</span><span class="nf">text</span>
    <span class="vi">@user_name</span> <span class="o">=</span> <span class="n">tweet_obj</span><span class="p">.</span><span class="nf">user</span><span class="p">.</span><span class="nf">name</span>
    <span class="vi">@user_handle</span> <span class="o">=</span> <span class="n">tweet_obj</span><span class="p">.</span><span class="nf">user</span><span class="p">.</span><span class="nf">handle</span>
    <span class="vi">@tweet_url</span> <span class="o">=</span> <span class="n">tweet_obj</span><span class="p">.</span><span class="nf">url</span>
    <span class="vi">@created_at</span> <span class="o">=</span> <span class="n">tweet_obj</span><span class="p">.</span><span class="nf">created_at</span>
    <span class="vi">@expanded_urls</span> <span class="o">=</span> <span class="n">tweet_obj</span><span class="p">.</span><span class="nf">urls</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span> <span class="n">url</span><span class="p">.</span><span class="nf">attrs</span><span class="p">[</span><span class="ss">:expanded_url</span><span class="p">]</span> <span class="p">}</span>    
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">expanded_urls</span> 
    <span class="vi">@expanded_urls</span>
  <span class="k">end</span>
  
<span class="k">end</span>
</code></pre></div></div>

<p>Remember: The idea here is to take everything we‚Äôre going to need from Twitter‚Äôs Tweet object (and nothing more) and making that information as easy to access as possible.</p>

<p>As we saw in the Tmieline model, our Tweet object accepts a Twitter Tweet object, <code class="language-plaintext highlighter-rouge">tweet_obj</code>, on initialization. So let‚Äôs start by looking at the initialize method.</p>

<p>The first line declares an instance variable called <code class="language-plaintext highlighter-rouge">@tweet_id</code> and assigns it to <code class="language-plaintext highlighter-rouge">tweet_obj.id</code>. Twitter‚Äôs Tweet object has an instance method called <code class="language-plaintext highlighter-rouge">id</code> that returns the id of that particular tweet. Since we‚Äôre going to need that later, we save it as <code class="language-plaintext highlighter-rouge">@tweet_id</code>. We also declare an <code class="language-plaintext highlighter-rouge">attr_reader</code> for <code class="language-plaintext highlighter-rouge">tweet_id</code> so we can read from it later.</p>

<p>We follow the same procedure for <code class="language-plaintext highlighter-rouge">@text</code>, <code class="language-plaintext highlighter-rouge">@user_name</code>, <code class="language-plaintext highlighter-rouge">@user_handle</code>, <code class="language-plaintext highlighter-rouge">@tweet_url</code> (the URL of the Tweet itself), and <code class="language-plaintext highlighter-rouge">@created_at</code>. These are the variables we‚Äôll need to display the Tweet in the view.</p>

<p>The only one that is different is <code class="language-plaintext highlighter-rouge">@expanded_urls</code>. This is the most important move in this method. Digging into Twitter‚Äôs Tweet object, we evenually found an array of all the URLs contained in the text of that Tweet (some tweets have more than one URL in it). Obviously this is very important to us given the URL-collecting nature of our app.</p>

<p>We choose the expanded URL as opposed to the shortened or display URL because the same link can be shortened in a variety of ways, but it will usually have the same expanded URL. This makes it easily to compare tham later.</p>

<p>Finally, since <code class="language-plaintext highlighter-rouge">@expanded_urls</code> is an array, I wrote out a reader for it below the intialize method.</p>

<h3 id="making-url-objects">Making URL Objects</h3>

<p>Now that <code class="language-plaintext highlighter-rouge">@tweets</code> is an array loaded-up with our custom-made Tweet objects, we‚Äôre ready to get the fun part‚Äì making the URL objects.</p>

<p>What‚Äôs a URL object? A URL object is an object that represents one row of Tweets on the SquawkBot results page. We‚Äôre going to comb through every tweet we got from the user‚Äôs timeline and everytime we see a URL, we‚Äôre either going to give it a ‚Äúplus one‚Äù appearance, or, if we haven‚Äôt seen that URL before, we‚Äôre going to make a new URL object. Thus, one URL object may contain multiple tweets.</p>

<p>So let‚Äôs say this link to this article: http://www.theawl.com/2014/04/in-defense-of-explaining-things gets tweeted by 5 people who I follow. There will be URL object with an <code class="language-plaintext highlighter-rouge">address</code> of http://www.theawl.com/2014/04/in-defense-of-explaining-things and its <code class="language-plaintext highlighter-rouge">appearances</code> will be 5. The URL object will also have an array of Tweet objects that contain that URL.</p>

<p>Here is the Url model:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Url</span>
  <span class="nb">attr_accessor</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">:appearances</span>

  <span class="k">def</span> <span class="nf">initialize</span> 
    <span class="vi">@tweet_objs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="vi">@appearances</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="k">end</span> 

  <span class="k">def</span> <span class="nf">tweet_objs</span> 
    <span class="vi">@tweet_objs</span>
  <span class="k">end</span> 

  <span class="k">def</span> <span class="nf">add_tweet_obj</span><span class="p">(</span><span class="n">tweet_obj</span><span class="p">)</span>
    <span class="vi">@tweet_objs</span> <span class="o">&lt;&lt;</span> <span class="n">tweet_obj</span>
  <span class="k">end</span> 
<span class="k">end</span> 
</code></pre></div></div>

<p>I call the Tweet objects <code class="language-plaintext highlighter-rouge">@tweet_objs</code> just so we know what they are. I also defined a method <code class="language-plaintext highlighter-rouge">add_tweet_obj</code> that adds a Tweet to a URL. The other thing you may notice is that on intialization I set <code class="language-plaintext highlighter-rouge">appearances</code> = 1, which makes sense.</p>

<p>OK, now we‚Äôre ready to return to the Timeline model and see the all-important <code class="language-plaintext highlighter-rouge">make_url_objs</code> method.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">make_url_objs</span>
  <span class="nb">self</span><span class="p">.</span><span class="nf">make_tweets</span>

  <span class="vi">@tweets</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
    <span class="n">tweet</span><span class="p">.</span><span class="nf">expanded_urls</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
      <span class="n">url_obj</span> <span class="o">=</span> <span class="vi">@url_objs</span><span class="p">.</span><span class="nf">detect</span> <span class="p">{</span><span class="o">|</span><span class="n">url_obj</span><span class="o">|</span> <span class="n">url_obj</span><span class="p">.</span><span class="nf">address</span> <span class="o">==</span> <span class="n">url</span> <span class="p">}</span> 
    
      <span class="k">if</span> <span class="n">url_obj</span>
        <span class="n">url_obj</span><span class="p">.</span><span class="nf">appearances</span> <span class="o">=</span> <span class="n">url_obj</span><span class="p">.</span><span class="nf">appearances</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">url_obj</span><span class="p">.</span><span class="nf">add_tweet_obj</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
      <span class="k">else</span>
        <span class="n">new_url_obj</span> <span class="o">=</span> <span class="no">Url</span><span class="p">.</span><span class="nf">new</span>
        <span class="n">new_url_obj</span><span class="p">.</span><span class="nf">address</span> <span class="o">=</span> <span class="n">url</span>
        <span class="n">new_url_obj</span><span class="p">.</span><span class="nf">add_tweet_obj</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
        <span class="vi">@url_objs</span> <span class="o">&lt;&lt;</span> <span class="n">new_url_obj</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># more code here...</span>

<span class="k">end</span>
</code></pre></div></div>

<p>Since <code class="language-plaintext highlighter-rouge">make_url_objs</code> is the only method we call in the show action of the Timelines controller (besides <code class="language-plaintext highlighter-rouge">get_max_appearances</code>, which isn‚Äôt super important), we need all the magic to happen here. Thus the first line of the method, which called the <code class="language-plaintext highlighter-rouge">make_tweets</code> method on <code class="language-plaintext highlighter-rouge">self</code>. As we‚Äôve gone over, that method basically loads up the <code class="language-plaintext highlighter-rouge">@tweets</code> instance method with our custom Tweet objects.</p>

<p>Next we have nested each loops that go through each URL in each tweet (remember: some tweets have more than one URL in it). Now that we have a particular <code class="language-plaintext highlighter-rouge">url</code>, we want to check to see if we‚Äôre ever seen it before.</p>

<p>We assign the result of that little <code class="language-plaintext highlighter-rouge">detect</code> method to a new local variable called <code class="language-plaintext highlighter-rouge">url_obj</code>. If there was a match, <code class="language-plaintext highlighter-rouge">url_obj</code> will be the matching URL object. If there was no match, <code class="language-plaintext highlighter-rouge">url_obj</code> will equal nil.</p>

<p>So if <code class="language-plaintext highlighter-rouge">url_obj</code> exists, we know there was a match. Thus we want to increase the <code class="language-plaintext highlighter-rouge">appearances</code> of that URL by one and we want to add the Tweet we found the URL in to the <code class="language-plaintext highlighter-rouge">tweet_objs</code> array of that <code class="language-plaintext highlighter-rouge">url_obj</code>. Basically we just found another tweet the mentions that article.</p>

<p>If there‚Äôs no match, we have found a new URL and we want to make a new Url object. We give it the address of the url we‚Äôre currently on, add the tweet to its tweet_objs array, and add the Url object itself to <code class="language-plaintext highlighter-rouge">@url_objs</code>, so it will return a match next time we see it.</p>

<p>Coming out of those two each loops we‚Äôll have an array of URL objects in <code class="language-plaintext highlighter-rouge">@url_objs</code>.</p>

<p>Next we‚Äôll run a filtering method on this instance array. The method, called <code class="language-plaintext highlighter-rouge">filter_url_objs</code>, rejects any URLs with appearance &gt; 1, and it also attempts to weed out multiple tweets by the same  user. The use case here is when CNN tweets a link to the same article 4 times in a short amount of time‚Äì we decided that we didn‚Äôt want this to constitute a legit ‚Äòsquawk‚Äô on its own.</p>

<p>We then sort the array by appearances (most appearances first) and we‚Äôre ready to send <code class="language-plaintext highlighter-rouge">@url_objs</code> back to the Timeslines controller and on to the <code class="language-plaintext highlighter-rouge">show</code> view.</p>

<p>Phew! I know that ran a little long but I hope it was helpful to some of you. The rest of the app is all about making the Tweets display nicely, the methods for which are in the <code class="language-plaintext highlighter-rouge">tweets_helper</code> and from the <a href="https://github.com/twitter/twitter-text-rb">Twitter-Text</a> Ruby gem (namely that <code class="language-plaintext highlighter-rouge">auto_link</code> method). @reply me on Twitter if you have any further questions about SquawkBot.</p>

:ET