I"R-<p>I subscribe to <a href="https://cassidoo.co/newsletter/">a wonderful newsletter</a> that, among other things, presents readers with a coding challenge every week.</p>

<p>Here’s <a href="https://buttondown.email/cassidoo/archive/0e4a7da8-323c-4005-9c3f-51e9097e3bf0">this week’s question</a>:</p>

<blockquote>
  <p>Given an array of people objects (where each person has a name and a number of pizza slices they’re hungry for) and a number for the number of slices that the pizza can be sliced into, return the number of pizzas you need to buy.</p>
</blockquote>

<p>Example:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">arr</span> <span class="o">=</span> <span class="p">[{</span> <span class="na">name</span><span class="p">:</span> <span class="nx">Joe</span><span class="p">,</span> <span class="na">num</span><span class="p">:</span> <span class="mi">9</span> <span class="p">},</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="nx">Cami</span><span class="p">,</span> <span class="na">num</span><span class="p">:</span> <span class="mi">3</span> <span class="p">},</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="nx">Cassidy</span><span class="p">,</span> <span class="na">num</span><span class="p">:</span> <span class="mi">4</span> <span class="p">}]</span>
<span class="nx">gimmePizza</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="mi">2</span> <span class="c1">// 16 slices needed, pizzas can be sliced into 8 pieces, so 2 pizzas should be ordered</span>
</code></pre></div></div>

<p>Since Rust is basically the only language I write these days (even though I write it poorly), I naturally decided to use Rust.</p>

<p>Here was <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d81f894b7a83ce641c7cd41c8446e0a5">my first attempt</a>:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#![allow(dead_code)]</span>
<span class="k">struct</span> <span class="n">Person</span><span class="o">&lt;</span><span class="nv">'a</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="n">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="nv">'a</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">slices_requested</span><span class="p">:</span> <span class="nb">usize</span><span class="p">,</span>
<span class="p">}</span>
<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">persons</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span>
        <span class="n">Person</span> <span class="p">{</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">"Joe"</span><span class="p">,</span>
            <span class="n">slices_requested</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="n">Person</span> <span class="p">{</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">"Cami"</span><span class="p">,</span>
            <span class="n">slices_requested</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="n">Person</span> <span class="p">{</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">"Cassidy"</span><span class="p">,</span>
            <span class="n">slices_requested</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">];</span>

    <span class="nd">assert_eq!</span><span class="p">(</span><span class="nf">gimme_pizza</span><span class="p">(</span><span class="o">&amp;</span><span class="n">persons</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Need to order {} pizzas"</span><span class="p">,</span> <span class="nf">gimme_pizza</span><span class="p">(</span><span class="o">&amp;</span><span class="n">persons</span><span class="p">,</span> <span class="mi">8</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">gimme_pizza</span><span class="p">(</span><span class="n">persons</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">Person</span><span class="p">],</span> <span class="n">slices_per_pizza</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">slices_needed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="n">person</span> <span class="n">in</span> <span class="n">persons</span> <span class="p">{</span>
        <span class="n">slices_needed</span> <span class="o">+=</span> <span class="n">person</span><span class="py">.slices_requested</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">slices_needed</span> <span class="o">%</span> <span class="n">slices_per_pizza</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="n">slices_needed</span> <span class="o">/</span> <span class="n">slices_per_pizza</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">slices_needed</span> <span class="o">/</span> <span class="n">slices_per_pizza</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It works fine, but those first 4 lines of the <code class="language-plaintext highlighter-rouge">gimme_pizza</code> function bugged me – I shouldn’t have to declare a mutable variable and set it to 0 like that. I knew there was a better way, probably using <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map"><code class="language-plaintext highlighter-rouge">map</code></a>, to make that summation a bit tighter, but I couldn’t figure out how to get it to work.</p>

<p>Thanks to some <a href="https://octodon.social/@CobaltVelvet/104943310038730879">help from the Fediverse</a>, I now know this is what I was reaching for:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">gimme_pizza_using_map</span><span class="p">(</span><span class="n">persons</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">Person</span><span class="p">],</span> <span class="n">slices_per_pizza</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">slices_needed</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="n">persons</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.map</span><span class="p">(|</span><span class="n">person</span><span class="p">|</span> <span class="n">person</span><span class="py">.slices_requested</span><span class="p">)</span><span class="nf">.sum</span><span class="p">();</span>
    <span class="k">if</span> <span class="n">slices_needed</span> <span class="o">%</span> <span class="n">slices_per_pizza</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="n">slices_needed</span> <span class="o">/</span> <span class="n">slices_per_pizza</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">slices_needed</span> <span class="o">/</span> <span class="n">slices_per_pizza</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Alternatively, I could have used <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold"><code class="language-plaintext highlighter-rouge">fold</code></a>, another <a href="https://fosstodon.org/@george_/104943308725289404">pair</a> <a href="https://mastodon.social/@jeancf/104943291748723775">of</a> Fediverse users pointed out. That would have looked like this:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">gimme_pizza_using_fold</span><span class="p">(</span><span class="n">persons</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="n">Person</span><span class="p">],</span> <span class="n">slices_per_pizza</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">slices_needed</span><span class="p">:</span> <span class="nb">usize</span> <span class="o">=</span> <span class="n">persons</span><span class="nf">.iter</span><span class="p">()</span><span class="nf">.fold</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">|</span><span class="n">running_sum</span><span class="p">,</span> <span class="n">person</span><span class="p">|</span> <span class="p">{</span>
        <span class="n">running_sum</span> <span class="o">+</span> <span class="n">person</span><span class="py">.slices_requested</span>
    <span class="p">});</span>
    <span class="k">if</span> <span class="n">slices_needed</span> <span class="o">%</span> <span class="n">slices_per_pizza</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="n">slices_needed</span> <span class="o">/</span> <span class="n">slices_per_pizza</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">slices_needed</span> <span class="o">/</span> <span class="n">slices_per_pizza</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I’m not sure with I prefer… I’m guessing <code class="language-plaintext highlighter-rouge">fold</code> is more versatile for cases where you want to do more than summing. And I don’t love that map returns its own object type that you can only do certain things with, whereas fold is more an all-in-one approach.</p>

<p>Separately, I’m curious if there’s a more concise way to go from <code class="language-plaintext highlighter-rouge">slices_needed</code> to <code class="language-plaintext highlighter-rouge">pizzas_needed</code>, besides my big ole, 5-line if/else using modulo.</p>
:ET