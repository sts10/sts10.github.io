I"i<p>I’ve been playing around with Vim’s <code class="language-plaintext highlighter-rouge">gx</code> command, which in normal mode, when on a URL, opens that URL in your default browser (see <code class="language-plaintext highlighter-rouge">:h gx</code>). However today I ran into an interesting problem– if a URL has a <code class="language-plaintext highlighter-rouge">?</code> in it <code class="language-plaintext highlighter-rouge">gx</code> thinks the URL ends at the <code class="language-plaintext highlighter-rouge">?</code>. Note that I’m using OS X and Chrome is my default browser. I’m seeing this problem in both MacVim 7.4 (88) and Neovim v0.1.3-61-gf03ab69.</p>

<p>This might not seem like a big deal for most URLs, since usually the characters after a <code class="language-plaintext highlighter-rouge">?</code> are superfluous tracking codes (though for my job they’re pretty important). However there are the very large exceptions of YouTube video URLs, like <code class="language-plaintext highlighter-rouge">https://www.youtube.com/watch?v=wlR5gYd6um0</code>, and Google search results pages, like <code class="language-plaintext highlighter-rouge">https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=vim%20gx%20command</code>.</p>

<p>Placing your normal mode cursor anywhere before the <code class="language-plaintext highlighter-rouge">?</code> in either of those URLs and hitting <code class="language-plaintext highlighter-rouge">gx</code> will open the URL up to but not past the <code class="language-plaintext highlighter-rouge">?</code>, thus taking you to a different location than intended. There are probably other examples where the <code class="language-plaintext highlighter-rouge">?</code> is non-trivial.</p>

<!-- more -->

<p>This same problem is described in <a href="http://vi.stackexchange.com/questions/2801/how-can-i-make-gx-recognise-full-urls-in-vim">this Stack Exchange question</a>. Interestingly, the top answer to the Stack Exchange question says that the variable <code class="language-plaintext highlighter-rouge">g:netrx_gx</code> “determines what will be considered part of a URI” and that by default this is set to “<cfile>" (see `:help <cfile>`). The suggested fix is to change this variable from `<cfile>` to `<cWORD>`, however after some testing with that I found that it frequently selects MORE than a given URL, since it usually goes from space to space.</cWORD></cfile></cfile></cfile></p>

<p>Note there’s also <a href="https://github.com/vim/vim/issues/190">Issue #190</a> in <a href="https://github.com/vim/vim">vim/vim</a> which seems relevant, and presents some more clues. One user gives <a href="https://github.com/vim/vim/issues/190#issuecomment-132351369">this answer</a>, which points to <a href="https://github.com/drmikehenry/vimfiles/blob/9b987c0349c9b1739242369d3e2cd62deacfd28c/vimrc#L2467">a function in his vimrc</a> that may work as a fix– I didn’t try it. Here’s what I did.</p>

<h2 id="my-solution">My Solution</h2>

<p>So it’s not pretty, but here goes:</p>

<p>The first clue I got was from the very end of that Stack Exchange answer: “Hint: Using <code class="language-plaintext highlighter-rouge">gx</code> in visual mode, it will open the visually selected string (regardless of the above configuration).” The same feature is touched upon in the <a href="https://github.com/vim/vim/issues/190#issuecomment-132351362">Vim Github issue</a> that I mention above.</p>

<p>Kind of coincidentally, I recently installed the <a href="https://github.com/jceb/vim-textobj-uri">jceb/vim-textobj-uri Plugin</a> (which requires you to install <a href="https://github.com/kana/vim-textobj-user">kana/vim-textobj-user</a> first!). vim-textobj-uri, as you might guess, makes URIs text objects, and maps <code class="language-plaintext highlighter-rouge">iu</code> and <code class="language-plaintext highlighter-rouge">au</code> to interact with them.</p>

<p>Now that I had a well-made URI text object at my finger tips (which is helpful on it’s own!), I then typed this remapping into my vimrc:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap gx viugx&lt;Esc&gt;
</code></pre></div></div>

<p>As you can probably guess, this mapping visually selects the URI, then runs <code class="language-plaintext highlighter-rouge">gx</code> (from visual mode), then Escapes you back into normal mode.</p>

<p>Later I refined this in two ways. First, I chose to use my <code class="language-plaintext highlighter-rouge">x</code> mark in order to preserve my cursor position in the URI. And secondly, thanks to <a href="https://sts10.github.io/2016/02/16/one-solution-to-a-problem-with-vims-gx-command.html/#comment-279336198">a comment from Carudo</a>, I found that I could use the preferable <code class="language-plaintext highlighter-rouge">nnoremap</code> by doing this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nnoremap gx :normal mxviugx&lt;Esc&gt;`x
</code></pre></div></div>

<p>which you may prefer.</p>

<p>From my point of view this is a problem that should be solved by default by Vim itself, or at least there should exist something better to set <code class="language-plaintext highlighter-rouge">g:netrx_gx</code> to. Right?</p>

<h2 id="other-strangeness-with-gx">Other Strangeness with gx</h2>

<p>Sometimes when I run <code class="language-plaintext highlighter-rouge">gx</code> on some URLs (one example was: <code class="language-plaintext highlighter-rouge">http://vimcasts.org/episodes/meet-the-yank-register/</code>), it seems like Vim runs a <code class="language-plaintext highlighter-rouge">curl</code> command and attempts to download the source code of the file (sometimes it’s successfully and Vim opens the source code as a new buffer). This may be the case for URLs that end in trailing slashes, as <a href="http://vi.stackexchange.com/questions/5439/why-does-gx-call-curl-when-the-cursor-is-on-a-url-with-trailing-slash">this Stack Exchange user points out</a>, though, frustratingly, I haven’t been able to reproduce the behavior consistently.</p>

:ET