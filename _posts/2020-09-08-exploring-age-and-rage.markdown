---
layout: post
title: "All the rage: Exploring age and rage encryption tools"
date: 2020-09-08 15:46:00 -0400
comments: true
---

A while back I learned about [age](https://github.com/FiloSottile/age), which describes itself as "A simple, modern and secure encryption tool (and Go library) with small explicit keys, no config options, and UNIX-style composability." As someone who's struggled to learn and use PGP, I was intrigued! There's more info in [this public Google Doc](https://docs.google.com/document/d/11yHom20CrsuX8KQJXBBw04s80Unjv8zCg_A7sPAX_9Y/preview). 

There's also a port for Rust called [rage](https://github.com/str4d/rage), which is apparently inoperable with the original golang version. 

For no reason in particular, I'd thought I'd try out rage today. I am not an expert in encryption, Golang, or Rust, so don't take this guide as gospel. It's mostly a note to my future self!

## Installation

Since I have an up-to-date version of the Rust language installed (1.46), I installed rage by running `cargo install rage`. There are other options listed in the [README on Github](https://github.com/str4d/rage#installation).

## Encrypting a file with a passphrase 

Let's say we have a file called secrets.txt that we want to encrypt, such that only someone who knows a certain passphrase can decrypt it. We could just run:

```
$ rage -p -o secrets_encrypted.txt secrets.txt
```

Your terminal with then prompt you to enter your chosen the passphrase (if you don't provide one, rage will generate a nice long one for you). I left the passphrase field blank so that rage would generate a passphrase for me. Here's what I got:

```bash
$ rage -p -o secrets_encrypted.txt secrets.txt 
Using an autogenerated passphrase:
    skull-tribe-mirror-help-logic-maple-syrup-round-click-danger
```

Rage created a new file called "secrets_encrypted.txt" that is encrypted and thus unreadable. The original secrets.txt is still in tact. 

## Decrypting file with a passphrase

Decrypting this file is simple. Just run 

```
$ rage -d -o secrets_decrypted.txt secrets_encrypted.txt 
```

Running this command prompts you to enter the passphrase we set when encrypting the file. If you enter the passphrase correctly, rage decrypts the file into a new file called secrets_decrypted.txt. Again, the original "secrets_encrypted.txt" file is left in tact.

## Using a public/private key-pair

Encrypting and decrypting files with secret passphrases can be useful, but one downside is that you have to securely get that passphrase to the other party. We can avoid this issue by using a public/private key-pair, which rage also supports. 

When we installed rage, we got two executables: `rage`, which we've been using, and `rage-keygen`, which we haven't used yet. rage-kleygen generate key-pairs for us. Let's make a key-pair now.

```
$ rage-keygen > test_key.txt
```

Running this command will print our new _public_ key. 

```
Public key: age1s366ey709nfd29jpaapvq2s2w29wjv9y68v9vvz5rc5v3tgge4xq7afnej
```

It also places both this public key and our private or _secret_ key in a file called test_key.txt. You should not share your secret key with anyone. But since this is a demonstration, I'll copy and paste the contents of my new test_key.txt file below.

```txt
# created: 2020-09-08T15:39:39-04:00                                                                     
# public key: age1s366ey709nfd29jpaapvq2s2w29wjv9y68v9vvz5rc5v3tgge4xq7afnej                                         
AGE-SECRET-KEY-1URL6WQVKQ0ULFDH7S0UL3ZFL2FU0WAKD778CLK5E9ASH40S8R90QE8E20V
```

As you can see, the file contains both our public key and our secret key. 

### Encrypting a file for a public key 

Let's say someone else wants to encrypt a file for us, the holder of the key above. Let's say the file they want to encrypt for us is file_for_keyholder_only.txt. They'd run 

```
$ rage -o file_for_keyholder_only_encrypted.txt -r age1s366ey709nfd29jpaapvq2s2w29wjv9y68v9vvz5rc5v3tgge4xq7afnej file_for_keyholder_only.txt
```

That's a long one, so let's go over it. As above with the passphrase example, the `-o` flag tells rage where we'd like to place the output of this command -- in this case, a new file that will be encrypted. Next is the `-r` flag, which stands for recipient. Here, we're telling rage that we want to encrypt this file for a particular recipient, namely the owner of this specific public key (remember, _public_ keys can be shared safely out in the open). Then, lastly, we tell rage which file we want to act on, in this case "file_for_keyholder_only.txt", the file we wish to encrypt.

Once we hit enter, rage creates a new, encrypted file called file_for_keyholder_only_encrypted.txt. 

### Decrypting a file with a secret key

Now let's say we receive a file that's been encrypted for us using our public key. We want to decrypt it. We'll run:

```
$ rage -o decrypted.txt -i test_key.txt -d file_for_keyholder_only_encrypted.txt
```

Which will decrypt the file to "decrypted.txt". Note the `-i` flag pointing to the key-pair file (which contains the secret key), and the `-d` flag for decryption, which we're already familiar with. 

## Creating a more permanent identity 

If you want to create a key-pair that you'll use more permanently, the [age documentation](https://docs.google.com/document/d/11yHom20CrsuX8KQJXBBw04s80Unjv8zCg_A7sPAX_9Y/preview) recommends storing the key file in `~/.config/age/keys.txt`. You'd do this by running 

```
$ mkdir -p ~/.config/age
$ rage-keygen >> ~/.config/age/keys.txt
```

This is also handy because rage will look to that location first for key-pairs when decrypting. This means you can just run `rage -d encrypted_file.txt` (without specifying a key-pair file with `-i` like we did above), and rage will use the key-pair located at `~/.config/age/keys.txt` as a default.

As before, you can share this public key broadly and publicly, so that others could encrypt files for you. But don't share the secret key!

## More features

This guide is by no means exhaustive of what you can already do with these tools. Both rage and age currently have more features than I've outlined here. Check them out in each of their documentation!

## To look forward to 

It looks like the developer(s) of rage seem to be working on some sort of [Yubikey plugin](https://github.com/str4d/age-plugin-yubikey), though I'm not sure of its current status. That'd be pretty cool though!
